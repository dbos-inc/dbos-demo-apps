name: CI for TPC-C

on:
  push:
    branches: [ "main" ]
    paths:
      - 'tpcc/**'
      - '.github/workflows/tpcc.yml'
  pull_request:
    types:
      - ready_for_review
      - opened
      - reopened
      - synchronize
    paths:
      - 'tpcc/**'
      - '.github/workflows/tpcc.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # Service container for Postgres
    services:
      # Label used to access the service container.
      postgres:
        image: postgres:16
        env:
          # Specify the password for Postgres superuser.
          POSTGRES_PASSWORD: dbos
        # Set health checks to wait until postgres has started
        options: >-
          --name postgres
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Setup Postgres
        run: docker exec postgres psql -U postgres -c "CREATE DATABASE tpcc;"
        env:
          PGPASSWORD: dbos
      - name: Install go-tpc
        run: curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/pingcap/go-tpc/master/install.sh | sh
      - name: Load TPC-C Data
        run: $HOME/.go-tpc/bin/go-tpc tpcc prepare --no-check -d postgres -U postgres -p ${PGPASSWORD} -D tpcc -P 5432 --conn-params sslmode=disable --warehouses 1
        env:
          PGPASSWORD: dbos
      - name: Checkout demo app
        uses: actions/checkout@v3
        with:
          path: dbos-demo-apps
      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Compile and Test TPC-C
        working-directory: dbos-demo-apps/tpcc
        run: |
          npm install
          npm run build
          npm run lint
          npm run test
        env:
          PGPASSWORD: dbos
