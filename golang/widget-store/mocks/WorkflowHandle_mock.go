// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/dbos-inc/dbos-transact-go/dbos"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWorkflowHandle creates a new instance of MockWorkflowHandle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkflowHandle[R any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkflowHandle[R] {
	mock := &MockWorkflowHandle[R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorkflowHandle is an autogenerated mock type for the WorkflowHandle type
type MockWorkflowHandle[R any] struct {
	mock.Mock
}

type MockWorkflowHandle_Expecter[R any] struct {
	mock *mock.Mock
}

func (_m *MockWorkflowHandle[R]) EXPECT() *MockWorkflowHandle_Expecter[R] {
	return &MockWorkflowHandle_Expecter[R]{mock: &_m.Mock}
}

// GetResult provides a mock function for the type MockWorkflowHandle
func (_mock *MockWorkflowHandle[R]) GetResult() (R, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResult")
	}

	var r0 R
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (R, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() R); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(R)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkflowHandle_GetResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResult'
type MockWorkflowHandle_GetResult_Call[R any] struct {
	*mock.Call
}

// GetResult is a helper method to define mock.On call
func (_e *MockWorkflowHandle_Expecter[R]) GetResult() *MockWorkflowHandle_GetResult_Call[R] {
	return &MockWorkflowHandle_GetResult_Call[R]{Call: _e.mock.On("GetResult")}
}

func (_c *MockWorkflowHandle_GetResult_Call[R]) Run(run func()) *MockWorkflowHandle_GetResult_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkflowHandle_GetResult_Call[R]) Return(v R, err error) *MockWorkflowHandle_GetResult_Call[R] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockWorkflowHandle_GetResult_Call[R]) RunAndReturn(run func() (R, error)) *MockWorkflowHandle_GetResult_Call[R] {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function for the type MockWorkflowHandle
func (_mock *MockWorkflowHandle[R]) GetStatus() (dbos.WorkflowStatus, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 dbos.WorkflowStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (dbos.WorkflowStatus, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() dbos.WorkflowStatus); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(dbos.WorkflowStatus)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkflowHandle_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type MockWorkflowHandle_GetStatus_Call[R any] struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
func (_e *MockWorkflowHandle_Expecter[R]) GetStatus() *MockWorkflowHandle_GetStatus_Call[R] {
	return &MockWorkflowHandle_GetStatus_Call[R]{Call: _e.mock.On("GetStatus")}
}

func (_c *MockWorkflowHandle_GetStatus_Call[R]) Run(run func()) *MockWorkflowHandle_GetStatus_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkflowHandle_GetStatus_Call[R]) Return(workflowStatus dbos.WorkflowStatus, err error) *MockWorkflowHandle_GetStatus_Call[R] {
	_c.Call.Return(workflowStatus, err)
	return _c
}

func (_c *MockWorkflowHandle_GetStatus_Call[R]) RunAndReturn(run func() (dbos.WorkflowStatus, error)) *MockWorkflowHandle_GetStatus_Call[R] {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowID provides a mock function for the type MockWorkflowHandle
func (_mock *MockWorkflowHandle[R]) GetWorkflowID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockWorkflowHandle_GetWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowID'
type MockWorkflowHandle_GetWorkflowID_Call[R any] struct {
	*mock.Call
}

// GetWorkflowID is a helper method to define mock.On call
func (_e *MockWorkflowHandle_Expecter[R]) GetWorkflowID() *MockWorkflowHandle_GetWorkflowID_Call[R] {
	return &MockWorkflowHandle_GetWorkflowID_Call[R]{Call: _e.mock.On("GetWorkflowID")}
}

func (_c *MockWorkflowHandle_GetWorkflowID_Call[R]) Run(run func()) *MockWorkflowHandle_GetWorkflowID_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkflowHandle_GetWorkflowID_Call[R]) Return(s string) *MockWorkflowHandle_GetWorkflowID_Call[R] {
	_c.Call.Return(s)
	return _c
}

func (_c *MockWorkflowHandle_GetWorkflowID_Call[R]) RunAndReturn(run func() string) *MockWorkflowHandle_GetWorkflowID_Call[R] {
	_c.Call.Return(run)
	return _c
}
