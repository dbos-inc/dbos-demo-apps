// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/dbos-inc/dbos-transact-golang/dbos"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDBOSContext creates a new instance of MockDBOSContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBOSContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBOSContext {
	mock := &MockDBOSContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBOSContext is an autogenerated mock type for the DBOSContext type
type MockDBOSContext struct {
	mock.Mock
}

type MockDBOSContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBOSContext) EXPECT() *MockDBOSContext_Expecter {
	return &MockDBOSContext_Expecter{mock: &_m.Mock}
}

// CancelWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) CancelWorkflow(dBOSContext dbos.DBOSContext, workflowID string) error {
	ret := _mock.Called(dBOSContext, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for CancelWorkflow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string) error); ok {
		r0 = returnFunc(dBOSContext, workflowID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_CancelWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelWorkflow'
type MockDBOSContext_CancelWorkflow_Call struct {
	*mock.Call
}

// CancelWorkflow is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - workflowID string
func (_e *MockDBOSContext_Expecter) CancelWorkflow(dBOSContext interface{}, workflowID interface{}) *MockDBOSContext_CancelWorkflow_Call {
	return &MockDBOSContext_CancelWorkflow_Call{Call: _e.mock.On("CancelWorkflow", dBOSContext, workflowID)}
}

func (_c *MockDBOSContext_CancelWorkflow_Call) Run(run func(dBOSContext dbos.DBOSContext, workflowID string)) *MockDBOSContext_CancelWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_CancelWorkflow_Call) Return(err error) *MockDBOSContext_CancelWorkflow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_CancelWorkflow_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, workflowID string) error) *MockDBOSContext_CancelWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// Deadline provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Deadline() (time.Time, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockDBOSContext_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type MockDBOSContext_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Deadline() *MockDBOSContext_Deadline_Call {
	return &MockDBOSContext_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *MockDBOSContext_Deadline_Call) Run(run func()) *MockDBOSContext_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Deadline_Call) Return(deadline time.Time, ok bool) *MockDBOSContext_Deadline_Call {
	_c.Call.Return(deadline, ok)
	return _c
}

func (_c *MockDBOSContext_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *MockDBOSContext_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockDBOSContext_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockDBOSContext_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Done() *MockDBOSContext_Done_Call {
	return &MockDBOSContext_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockDBOSContext_Done_Call) Run(run func()) *MockDBOSContext_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Done_Call) Return(valCh <-chan struct{}) *MockDBOSContext_Done_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockDBOSContext_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockDBOSContext_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Enqueue(dBOSContext dbos.DBOSContext, queueName string, workflowName string, input any, opts ...dbos.EnqueueOption) (dbos.WorkflowHandle[any], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(dBOSContext, queueName, workflowName, input, opts)
	} else {
		tmpRet = _mock.Called(dBOSContext, queueName, workflowName, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 dbos.WorkflowHandle[any]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string, string, any, ...dbos.EnqueueOption) (dbos.WorkflowHandle[any], error)); ok {
		return returnFunc(dBOSContext, queueName, workflowName, input, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string, string, any, ...dbos.EnqueueOption) dbos.WorkflowHandle[any]); ok {
		r0 = returnFunc(dBOSContext, queueName, workflowName, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbos.WorkflowHandle[any])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, string, string, any, ...dbos.EnqueueOption) error); ok {
		r1 = returnFunc(dBOSContext, queueName, workflowName, input, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockDBOSContext_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - queueName string
//   - workflowName string
//   - input any
//   - opts ...dbos.EnqueueOption
func (_e *MockDBOSContext_Expecter) Enqueue(dBOSContext interface{}, queueName interface{}, workflowName interface{}, input interface{}, opts ...interface{}) *MockDBOSContext_Enqueue_Call {
	return &MockDBOSContext_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{dBOSContext, queueName, workflowName, input}, opts...)...)}
}

func (_c *MockDBOSContext_Enqueue_Call) Run(run func(dBOSContext dbos.DBOSContext, queueName string, workflowName string, input any, opts ...dbos.EnqueueOption)) *MockDBOSContext_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		var arg4 []dbos.EnqueueOption
		var variadicArgs []dbos.EnqueueOption
		if len(args) > 4 {
			variadicArgs = args[4].([]dbos.EnqueueOption)
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Enqueue_Call) Return(workflowHandle dbos.WorkflowHandle[any], err error) *MockDBOSContext_Enqueue_Call {
	_c.Call.Return(workflowHandle, err)
	return _c
}

func (_c *MockDBOSContext_Enqueue_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, queueName string, workflowName string, input any, opts ...dbos.EnqueueOption) (dbos.WorkflowHandle[any], error)) *MockDBOSContext_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockDBOSContext_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Err() *MockDBOSContext_Err_Call {
	return &MockDBOSContext_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockDBOSContext_Err_Call) Run(run func()) *MockDBOSContext_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Err_Call) Return(err error) *MockDBOSContext_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_Err_Call) RunAndReturn(run func() error) *MockDBOSContext_Err_Call {
	_c.Call.Return(run)
	return _c
}

// ForkWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) ForkWorkflow(dBOSContext dbos.DBOSContext, input dbos.ForkWorkflowInput) (dbos.WorkflowHandle[any], error) {
	ret := _mock.Called(dBOSContext, input)

	if len(ret) == 0 {
		panic("no return value specified for ForkWorkflow")
	}

	var r0 dbos.WorkflowHandle[any]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.ForkWorkflowInput) (dbos.WorkflowHandle[any], error)); ok {
		return returnFunc(dBOSContext, input)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.ForkWorkflowInput) dbos.WorkflowHandle[any]); ok {
		r0 = returnFunc(dBOSContext, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbos.WorkflowHandle[any])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, dbos.ForkWorkflowInput) error); ok {
		r1 = returnFunc(dBOSContext, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_ForkWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForkWorkflow'
type MockDBOSContext_ForkWorkflow_Call struct {
	*mock.Call
}

// ForkWorkflow is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - input dbos.ForkWorkflowInput
func (_e *MockDBOSContext_Expecter) ForkWorkflow(dBOSContext interface{}, input interface{}) *MockDBOSContext_ForkWorkflow_Call {
	return &MockDBOSContext_ForkWorkflow_Call{Call: _e.mock.On("ForkWorkflow", dBOSContext, input)}
}

func (_c *MockDBOSContext_ForkWorkflow_Call) Run(run func(dBOSContext dbos.DBOSContext, input dbos.ForkWorkflowInput)) *MockDBOSContext_ForkWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 dbos.ForkWorkflowInput
		if args[1] != nil {
			arg1 = args[1].(dbos.ForkWorkflowInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_ForkWorkflow_Call) Return(workflowHandle dbos.WorkflowHandle[any], err error) *MockDBOSContext_ForkWorkflow_Call {
	_c.Call.Return(workflowHandle, err)
	return _c
}

func (_c *MockDBOSContext_ForkWorkflow_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, input dbos.ForkWorkflowInput) (dbos.WorkflowHandle[any], error)) *MockDBOSContext_ForkWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetApplicationID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDBOSContext_GetApplicationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationID'
type MockDBOSContext_GetApplicationID_Call struct {
	*mock.Call
}

// GetApplicationID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetApplicationID() *MockDBOSContext_GetApplicationID_Call {
	return &MockDBOSContext_GetApplicationID_Call{Call: _e.mock.On("GetApplicationID")}
}

func (_c *MockDBOSContext_GetApplicationID_Call) Run(run func()) *MockDBOSContext_GetApplicationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetApplicationID_Call) Return(s string) *MockDBOSContext_GetApplicationID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDBOSContext_GetApplicationID_Call) RunAndReturn(run func() string) *MockDBOSContext_GetApplicationID_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationVersion provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetApplicationVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDBOSContext_GetApplicationVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationVersion'
type MockDBOSContext_GetApplicationVersion_Call struct {
	*mock.Call
}

// GetApplicationVersion is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetApplicationVersion() *MockDBOSContext_GetApplicationVersion_Call {
	return &MockDBOSContext_GetApplicationVersion_Call{Call: _e.mock.On("GetApplicationVersion")}
}

func (_c *MockDBOSContext_GetApplicationVersion_Call) Run(run func()) *MockDBOSContext_GetApplicationVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetApplicationVersion_Call) Return(s string) *MockDBOSContext_GetApplicationVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDBOSContext_GetApplicationVersion_Call) RunAndReturn(run func() string) *MockDBOSContext_GetApplicationVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvent provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetEvent(dBOSContext dbos.DBOSContext, targetWorkflowID string, key string, timeout time.Duration) (any, error) {
	ret := _mock.Called(dBOSContext, targetWorkflowID, key, timeout)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string, string, time.Duration) (any, error)); ok {
		return returnFunc(dBOSContext, targetWorkflowID, key, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string, string, time.Duration) any); ok {
		r0 = returnFunc(dBOSContext, targetWorkflowID, key, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, string, string, time.Duration) error); ok {
		r1 = returnFunc(dBOSContext, targetWorkflowID, key, timeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_GetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvent'
type MockDBOSContext_GetEvent_Call struct {
	*mock.Call
}

// GetEvent is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - targetWorkflowID string
//   - key string
//   - timeout time.Duration
func (_e *MockDBOSContext_Expecter) GetEvent(dBOSContext interface{}, targetWorkflowID interface{}, key interface{}, timeout interface{}) *MockDBOSContext_GetEvent_Call {
	return &MockDBOSContext_GetEvent_Call{Call: _e.mock.On("GetEvent", dBOSContext, targetWorkflowID, key, timeout)}
}

func (_c *MockDBOSContext_GetEvent_Call) Run(run func(dBOSContext dbos.DBOSContext, targetWorkflowID string, key string, timeout time.Duration)) *MockDBOSContext_GetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBOSContext_GetEvent_Call) Return(v any, err error) *MockDBOSContext_GetEvent_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_GetEvent_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, targetWorkflowID string, key string, timeout time.Duration) (any, error)) *MockDBOSContext_GetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutorID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetExecutorID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutorID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDBOSContext_GetExecutorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutorID'
type MockDBOSContext_GetExecutorID_Call struct {
	*mock.Call
}

// GetExecutorID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetExecutorID() *MockDBOSContext_GetExecutorID_Call {
	return &MockDBOSContext_GetExecutorID_Call{Call: _e.mock.On("GetExecutorID")}
}

func (_c *MockDBOSContext_GetExecutorID_Call) Run(run func()) *MockDBOSContext_GetExecutorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetExecutorID_Call) Return(s string) *MockDBOSContext_GetExecutorID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDBOSContext_GetExecutorID_Call) RunAndReturn(run func() string) *MockDBOSContext_GetExecutorID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStepID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetStepID() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStepID")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_GetStepID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStepID'
type MockDBOSContext_GetStepID_Call struct {
	*mock.Call
}

// GetStepID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetStepID() *MockDBOSContext_GetStepID_Call {
	return &MockDBOSContext_GetStepID_Call{Call: _e.mock.On("GetStepID")}
}

func (_c *MockDBOSContext_GetStepID_Call) Run(run func()) *MockDBOSContext_GetStepID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetStepID_Call) Return(n int, err error) *MockDBOSContext_GetStepID_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBOSContext_GetStepID_Call) RunAndReturn(run func() (int, error)) *MockDBOSContext_GetStepID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetWorkflowID() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_GetWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowID'
type MockDBOSContext_GetWorkflowID_Call struct {
	*mock.Call
}

// GetWorkflowID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetWorkflowID() *MockDBOSContext_GetWorkflowID_Call {
	return &MockDBOSContext_GetWorkflowID_Call{Call: _e.mock.On("GetWorkflowID")}
}

func (_c *MockDBOSContext_GetWorkflowID_Call) Run(run func()) *MockDBOSContext_GetWorkflowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetWorkflowID_Call) Return(s string, err error) *MockDBOSContext_GetWorkflowID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDBOSContext_GetWorkflowID_Call) RunAndReturn(run func() (string, error)) *MockDBOSContext_GetWorkflowID_Call {
	_c.Call.Return(run)
	return _c
}

// Launch provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Launch() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Launch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_Launch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Launch'
type MockDBOSContext_Launch_Call struct {
	*mock.Call
}

// Launch is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Launch() *MockDBOSContext_Launch_Call {
	return &MockDBOSContext_Launch_Call{Call: _e.mock.On("Launch")}
}

func (_c *MockDBOSContext_Launch_Call) Run(run func()) *MockDBOSContext_Launch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Launch_Call) Return(err error) *MockDBOSContext_Launch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_Launch_Call) RunAndReturn(run func() error) *MockDBOSContext_Launch_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflows provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) ListWorkflows(dBOSContext dbos.DBOSContext, opts ...dbos.ListWorkflowsOption) ([]dbos.WorkflowStatus, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(dBOSContext, opts)
	} else {
		tmpRet = _mock.Called(dBOSContext)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflows")
	}

	var r0 []dbos.WorkflowStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, ...dbos.ListWorkflowsOption) ([]dbos.WorkflowStatus, error)); ok {
		return returnFunc(dBOSContext, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, ...dbos.ListWorkflowsOption) []dbos.WorkflowStatus); ok {
		r0 = returnFunc(dBOSContext, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbos.WorkflowStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, ...dbos.ListWorkflowsOption) error); ok {
		r1 = returnFunc(dBOSContext, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_ListWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflows'
type MockDBOSContext_ListWorkflows_Call struct {
	*mock.Call
}

// ListWorkflows is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - opts ...dbos.ListWorkflowsOption
func (_e *MockDBOSContext_Expecter) ListWorkflows(dBOSContext interface{}, opts ...interface{}) *MockDBOSContext_ListWorkflows_Call {
	return &MockDBOSContext_ListWorkflows_Call{Call: _e.mock.On("ListWorkflows",
		append([]interface{}{dBOSContext}, opts...)...)}
}

func (_c *MockDBOSContext_ListWorkflows_Call) Run(run func(dBOSContext dbos.DBOSContext, opts ...dbos.ListWorkflowsOption)) *MockDBOSContext_ListWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 []dbos.ListWorkflowsOption
		var variadicArgs []dbos.ListWorkflowsOption
		if len(args) > 1 {
			variadicArgs = args[1].([]dbos.ListWorkflowsOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockDBOSContext_ListWorkflows_Call) Return(workflowStatuss []dbos.WorkflowStatus, err error) *MockDBOSContext_ListWorkflows_Call {
	_c.Call.Return(workflowStatuss, err)
	return _c
}

func (_c *MockDBOSContext_ListWorkflows_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, opts ...dbos.ListWorkflowsOption) ([]dbos.WorkflowStatus, error)) *MockDBOSContext_ListWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Recv(dBOSContext dbos.DBOSContext, topic string, timeout time.Duration) (any, error) {
	ret := _mock.Called(dBOSContext, topic, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string, time.Duration) (any, error)); ok {
		return returnFunc(dBOSContext, topic, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string, time.Duration) any); ok {
		r0 = returnFunc(dBOSContext, topic, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, string, time.Duration) error); ok {
		r1 = returnFunc(dBOSContext, topic, timeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type MockDBOSContext_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - topic string
//   - timeout time.Duration
func (_e *MockDBOSContext_Expecter) Recv(dBOSContext interface{}, topic interface{}, timeout interface{}) *MockDBOSContext_Recv_Call {
	return &MockDBOSContext_Recv_Call{Call: _e.mock.On("Recv", dBOSContext, topic, timeout)}
}

func (_c *MockDBOSContext_Recv_Call) Run(run func(dBOSContext dbos.DBOSContext, topic string, timeout time.Duration)) *MockDBOSContext_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Recv_Call) Return(v any, err error) *MockDBOSContext_Recv_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_Recv_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, topic string, timeout time.Duration) (any, error)) *MockDBOSContext_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// ResumeWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) ResumeWorkflow(dBOSContext dbos.DBOSContext, workflowID string) (dbos.WorkflowHandle[any], error) {
	ret := _mock.Called(dBOSContext, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for ResumeWorkflow")
	}

	var r0 dbos.WorkflowHandle[any]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string) (dbos.WorkflowHandle[any], error)); ok {
		return returnFunc(dBOSContext, workflowID)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string) dbos.WorkflowHandle[any]); ok {
		r0 = returnFunc(dBOSContext, workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbos.WorkflowHandle[any])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, string) error); ok {
		r1 = returnFunc(dBOSContext, workflowID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_ResumeWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumeWorkflow'
type MockDBOSContext_ResumeWorkflow_Call struct {
	*mock.Call
}

// ResumeWorkflow is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - workflowID string
func (_e *MockDBOSContext_Expecter) ResumeWorkflow(dBOSContext interface{}, workflowID interface{}) *MockDBOSContext_ResumeWorkflow_Call {
	return &MockDBOSContext_ResumeWorkflow_Call{Call: _e.mock.On("ResumeWorkflow", dBOSContext, workflowID)}
}

func (_c *MockDBOSContext_ResumeWorkflow_Call) Run(run func(dBOSContext dbos.DBOSContext, workflowID string)) *MockDBOSContext_ResumeWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_ResumeWorkflow_Call) Return(workflowHandle dbos.WorkflowHandle[any], err error) *MockDBOSContext_ResumeWorkflow_Call {
	_c.Call.Return(workflowHandle, err)
	return _c
}

func (_c *MockDBOSContext_ResumeWorkflow_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, workflowID string) (dbos.WorkflowHandle[any], error)) *MockDBOSContext_ResumeWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RetrieveWorkflow(dBOSContext dbos.DBOSContext, workflowID string) (dbos.WorkflowHandle[any], error) {
	ret := _mock.Called(dBOSContext, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveWorkflow")
	}

	var r0 dbos.WorkflowHandle[any]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string) (dbos.WorkflowHandle[any], error)); ok {
		return returnFunc(dBOSContext, workflowID)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string) dbos.WorkflowHandle[any]); ok {
		r0 = returnFunc(dBOSContext, workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbos.WorkflowHandle[any])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, string) error); ok {
		r1 = returnFunc(dBOSContext, workflowID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_RetrieveWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveWorkflow'
type MockDBOSContext_RetrieveWorkflow_Call struct {
	*mock.Call
}

// RetrieveWorkflow is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - workflowID string
func (_e *MockDBOSContext_Expecter) RetrieveWorkflow(dBOSContext interface{}, workflowID interface{}) *MockDBOSContext_RetrieveWorkflow_Call {
	return &MockDBOSContext_RetrieveWorkflow_Call{Call: _e.mock.On("RetrieveWorkflow", dBOSContext, workflowID)}
}

func (_c *MockDBOSContext_RetrieveWorkflow_Call) Run(run func(dBOSContext dbos.DBOSContext, workflowID string)) *MockDBOSContext_RetrieveWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RetrieveWorkflow_Call) Return(workflowHandle dbos.WorkflowHandle[any], err error) *MockDBOSContext_RetrieveWorkflow_Call {
	_c.Call.Return(workflowHandle, err)
	return _c
}

func (_c *MockDBOSContext_RetrieveWorkflow_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, workflowID string) (dbos.WorkflowHandle[any], error)) *MockDBOSContext_RetrieveWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// RunAsStep provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RunAsStep(dBOSContext dbos.DBOSContext, fn dbos.StepFunc, opts ...dbos.StepOption) (any, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(dBOSContext, fn, opts)
	} else {
		tmpRet = _mock.Called(dBOSContext, fn)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RunAsStep")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.StepFunc, ...dbos.StepOption) (any, error)); ok {
		return returnFunc(dBOSContext, fn, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.StepFunc, ...dbos.StepOption) any); ok {
		r0 = returnFunc(dBOSContext, fn, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, dbos.StepFunc, ...dbos.StepOption) error); ok {
		r1 = returnFunc(dBOSContext, fn, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_RunAsStep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunAsStep'
type MockDBOSContext_RunAsStep_Call struct {
	*mock.Call
}

// RunAsStep is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - fn dbos.StepFunc
//   - opts ...dbos.StepOption
func (_e *MockDBOSContext_Expecter) RunAsStep(dBOSContext interface{}, fn interface{}, opts ...interface{}) *MockDBOSContext_RunAsStep_Call {
	return &MockDBOSContext_RunAsStep_Call{Call: _e.mock.On("RunAsStep",
		append([]interface{}{dBOSContext, fn}, opts...)...)}
}

func (_c *MockDBOSContext_RunAsStep_Call) Run(run func(dBOSContext dbos.DBOSContext, fn dbos.StepFunc, opts ...dbos.StepOption)) *MockDBOSContext_RunAsStep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 dbos.StepFunc
		if args[1] != nil {
			arg1 = args[1].(dbos.StepFunc)
		}
		var arg2 []dbos.StepOption
		var variadicArgs []dbos.StepOption
		if len(args) > 2 {
			variadicArgs = args[2].([]dbos.StepOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RunAsStep_Call) Return(v any, err error) *MockDBOSContext_RunAsStep_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_RunAsStep_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, fn dbos.StepFunc, opts ...dbos.StepOption) (any, error)) *MockDBOSContext_RunAsStep_Call {
	_c.Call.Return(run)
	return _c
}

// RunWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RunWorkflow(dBOSContext dbos.DBOSContext, fn dbos.WorkflowFunc, input any, opts ...dbos.WorkflowOption) (dbos.WorkflowHandle[any], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(dBOSContext, fn, input, opts)
	} else {
		tmpRet = _mock.Called(dBOSContext, fn, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RunWorkflow")
	}

	var r0 dbos.WorkflowHandle[any]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowFunc, any, ...dbos.WorkflowOption) (dbos.WorkflowHandle[any], error)); ok {
		return returnFunc(dBOSContext, fn, input, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowFunc, any, ...dbos.WorkflowOption) dbos.WorkflowHandle[any]); ok {
		r0 = returnFunc(dBOSContext, fn, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbos.WorkflowHandle[any])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, dbos.WorkflowFunc, any, ...dbos.WorkflowOption) error); ok {
		r1 = returnFunc(dBOSContext, fn, input, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_RunWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunWorkflow'
type MockDBOSContext_RunWorkflow_Call struct {
	*mock.Call
}

// RunWorkflow is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - fn dbos.WorkflowFunc
//   - input any
//   - opts ...dbos.WorkflowOption
func (_e *MockDBOSContext_Expecter) RunWorkflow(dBOSContext interface{}, fn interface{}, input interface{}, opts ...interface{}) *MockDBOSContext_RunWorkflow_Call {
	return &MockDBOSContext_RunWorkflow_Call{Call: _e.mock.On("RunWorkflow",
		append([]interface{}{dBOSContext, fn, input}, opts...)...)}
}

func (_c *MockDBOSContext_RunWorkflow_Call) Run(run func(dBOSContext dbos.DBOSContext, fn dbos.WorkflowFunc, input any, opts ...dbos.WorkflowOption)) *MockDBOSContext_RunWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 dbos.WorkflowFunc
		if args[1] != nil {
			arg1 = args[1].(dbos.WorkflowFunc)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 []dbos.WorkflowOption
		var variadicArgs []dbos.WorkflowOption
		if len(args) > 3 {
			variadicArgs = args[3].([]dbos.WorkflowOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RunWorkflow_Call) Return(workflowHandle dbos.WorkflowHandle[any], err error) *MockDBOSContext_RunWorkflow_Call {
	_c.Call.Return(workflowHandle, err)
	return _c
}

func (_c *MockDBOSContext_RunWorkflow_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, fn dbos.WorkflowFunc, input any, opts ...dbos.WorkflowOption) (dbos.WorkflowHandle[any], error)) *MockDBOSContext_RunWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Send(dBOSContext dbos.DBOSContext, destinationID string, message any, topic string) error {
	ret := _mock.Called(dBOSContext, destinationID, message, topic)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string, any, string) error); ok {
		r0 = returnFunc(dBOSContext, destinationID, message, topic)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockDBOSContext_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - destinationID string
//   - message any
//   - topic string
func (_e *MockDBOSContext_Expecter) Send(dBOSContext interface{}, destinationID interface{}, message interface{}, topic interface{}) *MockDBOSContext_Send_Call {
	return &MockDBOSContext_Send_Call{Call: _e.mock.On("Send", dBOSContext, destinationID, message, topic)}
}

func (_c *MockDBOSContext_Send_Call) Run(run func(dBOSContext dbos.DBOSContext, destinationID string, message any, topic string)) *MockDBOSContext_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Send_Call) Return(err error) *MockDBOSContext_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_Send_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, destinationID string, message any, topic string) error) *MockDBOSContext_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetEvent provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) SetEvent(dBOSContext dbos.DBOSContext, key string, message any) error {
	ret := _mock.Called(dBOSContext, key, message)

	if len(ret) == 0 {
		panic("no return value specified for SetEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string, any) error); ok {
		r0 = returnFunc(dBOSContext, key, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_SetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEvent'
type MockDBOSContext_SetEvent_Call struct {
	*mock.Call
}

// SetEvent is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - key string
//   - message any
func (_e *MockDBOSContext_Expecter) SetEvent(dBOSContext interface{}, key interface{}, message interface{}) *MockDBOSContext_SetEvent_Call {
	return &MockDBOSContext_SetEvent_Call{Call: _e.mock.On("SetEvent", dBOSContext, key, message)}
}

func (_c *MockDBOSContext_SetEvent_Call) Run(run func(dBOSContext dbos.DBOSContext, key string, message any)) *MockDBOSContext_SetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBOSContext_SetEvent_Call) Return(err error) *MockDBOSContext_SetEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_SetEvent_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, key string, message any) error) *MockDBOSContext_SetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Shutdown(timeout time.Duration) {
	_mock.Called(timeout)
	return
}

// MockDBOSContext_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockDBOSContext_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *MockDBOSContext_Expecter) Shutdown(timeout interface{}) *MockDBOSContext_Shutdown_Call {
	return &MockDBOSContext_Shutdown_Call{Call: _e.mock.On("Shutdown", timeout)}
}

func (_c *MockDBOSContext_Shutdown_Call) Run(run func(timeout time.Duration)) *MockDBOSContext_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Duration
		if args[0] != nil {
			arg0 = args[0].(time.Duration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Shutdown_Call) Return() *MockDBOSContext_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDBOSContext_Shutdown_Call) RunAndReturn(run func(timeout time.Duration)) *MockDBOSContext_Shutdown_Call {
	_c.Run(run)
	return _c
}

// Sleep provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Sleep(dBOSContext dbos.DBOSContext, duration time.Duration) (time.Duration, error) {
	ret := _mock.Called(dBOSContext, duration)

	if len(ret) == 0 {
		panic("no return value specified for Sleep")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, time.Duration) (time.Duration, error)); ok {
		return returnFunc(dBOSContext, duration)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, time.Duration) time.Duration); ok {
		r0 = returnFunc(dBOSContext, duration)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, time.Duration) error); ok {
		r1 = returnFunc(dBOSContext, duration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_Sleep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sleep'
type MockDBOSContext_Sleep_Call struct {
	*mock.Call
}

// Sleep is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - duration time.Duration
func (_e *MockDBOSContext_Expecter) Sleep(dBOSContext interface{}, duration interface{}) *MockDBOSContext_Sleep_Call {
	return &MockDBOSContext_Sleep_Call{Call: _e.mock.On("Sleep", dBOSContext, duration)}
}

func (_c *MockDBOSContext_Sleep_Call) Run(run func(dBOSContext dbos.DBOSContext, duration time.Duration)) *MockDBOSContext_Sleep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Sleep_Call) Return(duration1 time.Duration, err error) *MockDBOSContext_Sleep_Call {
	_c.Call.Return(duration1, err)
	return _c
}

func (_c *MockDBOSContext_Sleep_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, duration time.Duration) (time.Duration, error)) *MockDBOSContext_Sleep_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Value(key any) any {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func(any) any); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockDBOSContext_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockDBOSContext_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key any
func (_e *MockDBOSContext_Expecter) Value(key interface{}) *MockDBOSContext_Value_Call {
	return &MockDBOSContext_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *MockDBOSContext_Value_Call) Run(run func(key any)) *MockDBOSContext_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Value_Call) Return(v any) *MockDBOSContext_Value_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockDBOSContext_Value_Call) RunAndReturn(run func(key any) any) *MockDBOSContext_Value_Call {
	_c.Call.Return(run)
	return _c
}
