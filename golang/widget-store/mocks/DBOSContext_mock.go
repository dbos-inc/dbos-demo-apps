// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/dbos-inc/dbos-transact-go/dbos"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDBOSContext creates a new instance of MockDBOSContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBOSContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBOSContext {
	mock := &MockDBOSContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBOSContext is an autogenerated mock type for the DBOSContext type
type MockDBOSContext struct {
	mock.Mock
}

type MockDBOSContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBOSContext) EXPECT() *MockDBOSContext_Expecter {
	return &MockDBOSContext_Expecter{mock: &_m.Mock}
}

// Deadline provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Deadline() (time.Time, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockDBOSContext_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type MockDBOSContext_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Deadline() *MockDBOSContext_Deadline_Call {
	return &MockDBOSContext_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *MockDBOSContext_Deadline_Call) Run(run func()) *MockDBOSContext_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Deadline_Call) Return(deadline time.Time, ok bool) *MockDBOSContext_Deadline_Call {
	_c.Call.Return(deadline, ok)
	return _c
}

func (_c *MockDBOSContext_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *MockDBOSContext_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockDBOSContext_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockDBOSContext_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Done() *MockDBOSContext_Done_Call {
	return &MockDBOSContext_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockDBOSContext_Done_Call) Run(run func()) *MockDBOSContext_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Done_Call) Return(valCh <-chan struct{}) *MockDBOSContext_Done_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockDBOSContext_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockDBOSContext_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockDBOSContext_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Err() *MockDBOSContext_Err_Call {
	return &MockDBOSContext_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockDBOSContext_Err_Call) Run(run func()) *MockDBOSContext_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Err_Call) Return(err error) *MockDBOSContext_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_Err_Call) RunAndReturn(run func() error) *MockDBOSContext_Err_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetApplicationID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDBOSContext_GetApplicationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationID'
type MockDBOSContext_GetApplicationID_Call struct {
	*mock.Call
}

// GetApplicationID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetApplicationID() *MockDBOSContext_GetApplicationID_Call {
	return &MockDBOSContext_GetApplicationID_Call{Call: _e.mock.On("GetApplicationID")}
}

func (_c *MockDBOSContext_GetApplicationID_Call) Run(run func()) *MockDBOSContext_GetApplicationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetApplicationID_Call) Return(s string) *MockDBOSContext_GetApplicationID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDBOSContext_GetApplicationID_Call) RunAndReturn(run func() string) *MockDBOSContext_GetApplicationID_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationVersion provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetApplicationVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDBOSContext_GetApplicationVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationVersion'
type MockDBOSContext_GetApplicationVersion_Call struct {
	*mock.Call
}

// GetApplicationVersion is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetApplicationVersion() *MockDBOSContext_GetApplicationVersion_Call {
	return &MockDBOSContext_GetApplicationVersion_Call{Call: _e.mock.On("GetApplicationVersion")}
}

func (_c *MockDBOSContext_GetApplicationVersion_Call) Run(run func()) *MockDBOSContext_GetApplicationVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetApplicationVersion_Call) Return(s string) *MockDBOSContext_GetApplicationVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDBOSContext_GetApplicationVersion_Call) RunAndReturn(run func() string) *MockDBOSContext_GetApplicationVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvent provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetEvent(dBOSContext dbos.DBOSContext, input dbos.WorkflowGetEventInput) (any, error) {
	ret := _mock.Called(dBOSContext, input)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowGetEventInput) (any, error)); ok {
		return returnFunc(dBOSContext, input)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowGetEventInput) any); ok {
		r0 = returnFunc(dBOSContext, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, dbos.WorkflowGetEventInput) error); ok {
		r1 = returnFunc(dBOSContext, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_GetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvent'
type MockDBOSContext_GetEvent_Call struct {
	*mock.Call
}

// GetEvent is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - input dbos.WorkflowGetEventInput
func (_e *MockDBOSContext_Expecter) GetEvent(dBOSContext interface{}, input interface{}) *MockDBOSContext_GetEvent_Call {
	return &MockDBOSContext_GetEvent_Call{Call: _e.mock.On("GetEvent", dBOSContext, input)}
}

func (_c *MockDBOSContext_GetEvent_Call) Run(run func(dBOSContext dbos.DBOSContext, input dbos.WorkflowGetEventInput)) *MockDBOSContext_GetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 dbos.WorkflowGetEventInput
		if args[1] != nil {
			arg1 = args[1].(dbos.WorkflowGetEventInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_GetEvent_Call) Return(v any, err error) *MockDBOSContext_GetEvent_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_GetEvent_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, input dbos.WorkflowGetEventInput) (any, error)) *MockDBOSContext_GetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutorID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetExecutorID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutorID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDBOSContext_GetExecutorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutorID'
type MockDBOSContext_GetExecutorID_Call struct {
	*mock.Call
}

// GetExecutorID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetExecutorID() *MockDBOSContext_GetExecutorID_Call {
	return &MockDBOSContext_GetExecutorID_Call{Call: _e.mock.On("GetExecutorID")}
}

func (_c *MockDBOSContext_GetExecutorID_Call) Run(run func()) *MockDBOSContext_GetExecutorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetExecutorID_Call) Return(s string) *MockDBOSContext_GetExecutorID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDBOSContext_GetExecutorID_Call) RunAndReturn(run func() string) *MockDBOSContext_GetExecutorID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetWorkflowID() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_GetWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowID'
type MockDBOSContext_GetWorkflowID_Call struct {
	*mock.Call
}

// GetWorkflowID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetWorkflowID() *MockDBOSContext_GetWorkflowID_Call {
	return &MockDBOSContext_GetWorkflowID_Call{Call: _e.mock.On("GetWorkflowID")}
}

func (_c *MockDBOSContext_GetWorkflowID_Call) Run(run func()) *MockDBOSContext_GetWorkflowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetWorkflowID_Call) Return(s string, err error) *MockDBOSContext_GetWorkflowID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDBOSContext_GetWorkflowID_Call) RunAndReturn(run func() (string, error)) *MockDBOSContext_GetWorkflowID_Call {
	_c.Call.Return(run)
	return _c
}

// Launch provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Launch() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Launch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_Launch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Launch'
type MockDBOSContext_Launch_Call struct {
	*mock.Call
}

// Launch is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Launch() *MockDBOSContext_Launch_Call {
	return &MockDBOSContext_Launch_Call{Call: _e.mock.On("Launch")}
}

func (_c *MockDBOSContext_Launch_Call) Run(run func()) *MockDBOSContext_Launch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Launch_Call) Return(err error) *MockDBOSContext_Launch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_Launch_Call) RunAndReturn(run func() error) *MockDBOSContext_Launch_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Recv(dBOSContext dbos.DBOSContext, input dbos.WorkflowRecvInput) (any, error) {
	ret := _mock.Called(dBOSContext, input)

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowRecvInput) (any, error)); ok {
		return returnFunc(dBOSContext, input)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowRecvInput) any); ok {
		r0 = returnFunc(dBOSContext, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, dbos.WorkflowRecvInput) error); ok {
		r1 = returnFunc(dBOSContext, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type MockDBOSContext_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - input dbos.WorkflowRecvInput
func (_e *MockDBOSContext_Expecter) Recv(dBOSContext interface{}, input interface{}) *MockDBOSContext_Recv_Call {
	return &MockDBOSContext_Recv_Call{Call: _e.mock.On("Recv", dBOSContext, input)}
}

func (_c *MockDBOSContext_Recv_Call) Run(run func(dBOSContext dbos.DBOSContext, input dbos.WorkflowRecvInput)) *MockDBOSContext_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 dbos.WorkflowRecvInput
		if args[1] != nil {
			arg1 = args[1].(dbos.WorkflowRecvInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Recv_Call) Return(v any, err error) *MockDBOSContext_Recv_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_Recv_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, input dbos.WorkflowRecvInput) (any, error)) *MockDBOSContext_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RetrieveWorkflow(dBOSContext dbos.DBOSContext, workflowID string) (dbos.WorkflowHandle[any], error) {
	ret := _mock.Called(dBOSContext, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveWorkflow")
	}

	var r0 dbos.WorkflowHandle[any]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string) (dbos.WorkflowHandle[any], error)); ok {
		return returnFunc(dBOSContext, workflowID)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, string) dbos.WorkflowHandle[any]); ok {
		r0 = returnFunc(dBOSContext, workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbos.WorkflowHandle[any])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, string) error); ok {
		r1 = returnFunc(dBOSContext, workflowID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_RetrieveWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveWorkflow'
type MockDBOSContext_RetrieveWorkflow_Call struct {
	*mock.Call
}

// RetrieveWorkflow is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - workflowID string
func (_e *MockDBOSContext_Expecter) RetrieveWorkflow(dBOSContext interface{}, workflowID interface{}) *MockDBOSContext_RetrieveWorkflow_Call {
	return &MockDBOSContext_RetrieveWorkflow_Call{Call: _e.mock.On("RetrieveWorkflow", dBOSContext, workflowID)}
}

func (_c *MockDBOSContext_RetrieveWorkflow_Call) Run(run func(dBOSContext dbos.DBOSContext, workflowID string)) *MockDBOSContext_RetrieveWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RetrieveWorkflow_Call) Return(workflowHandle dbos.WorkflowHandle[any], err error) *MockDBOSContext_RetrieveWorkflow_Call {
	_c.Call.Return(workflowHandle, err)
	return _c
}

func (_c *MockDBOSContext_RetrieveWorkflow_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, workflowID string) (dbos.WorkflowHandle[any], error)) *MockDBOSContext_RetrieveWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// RunAsStep provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RunAsStep(dBOSContext dbos.DBOSContext, fn dbos.StepFunc, input any) (any, error) {
	ret := _mock.Called(dBOSContext, fn, input)

	if len(ret) == 0 {
		panic("no return value specified for RunAsStep")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.StepFunc, any) (any, error)); ok {
		return returnFunc(dBOSContext, fn, input)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.StepFunc, any) any); ok {
		r0 = returnFunc(dBOSContext, fn, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, dbos.StepFunc, any) error); ok {
		r1 = returnFunc(dBOSContext, fn, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_RunAsStep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunAsStep'
type MockDBOSContext_RunAsStep_Call struct {
	*mock.Call
}

// RunAsStep is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - fn dbos.StepFunc
//   - input any
func (_e *MockDBOSContext_Expecter) RunAsStep(dBOSContext interface{}, fn interface{}, input interface{}) *MockDBOSContext_RunAsStep_Call {
	return &MockDBOSContext_RunAsStep_Call{Call: _e.mock.On("RunAsStep", dBOSContext, fn, input)}
}

func (_c *MockDBOSContext_RunAsStep_Call) Run(run func(dBOSContext dbos.DBOSContext, fn dbos.StepFunc, input any)) *MockDBOSContext_RunAsStep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 dbos.StepFunc
		if args[1] != nil {
			arg1 = args[1].(dbos.StepFunc)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RunAsStep_Call) Return(v any, err error) *MockDBOSContext_RunAsStep_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_RunAsStep_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, fn dbos.StepFunc, input any) (any, error)) *MockDBOSContext_RunAsStep_Call {
	_c.Call.Return(run)
	return _c
}

// RunAsWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RunAsWorkflow(dBOSContext dbos.DBOSContext, fn dbos.WorkflowFunc, input any, opts ...dbos.WorkflowOption) (dbos.WorkflowHandle[any], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(dBOSContext, fn, input, opts)
	} else {
		tmpRet = _mock.Called(dBOSContext, fn, input)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RunAsWorkflow")
	}

	var r0 dbos.WorkflowHandle[any]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowFunc, any, ...dbos.WorkflowOption) (dbos.WorkflowHandle[any], error)); ok {
		return returnFunc(dBOSContext, fn, input, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowFunc, any, ...dbos.WorkflowOption) dbos.WorkflowHandle[any]); ok {
		r0 = returnFunc(dBOSContext, fn, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbos.WorkflowHandle[any])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.DBOSContext, dbos.WorkflowFunc, any, ...dbos.WorkflowOption) error); ok {
		r1 = returnFunc(dBOSContext, fn, input, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_RunAsWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunAsWorkflow'
type MockDBOSContext_RunAsWorkflow_Call struct {
	*mock.Call
}

// RunAsWorkflow is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - fn dbos.WorkflowFunc
//   - input any
//   - opts ...dbos.WorkflowOption
func (_e *MockDBOSContext_Expecter) RunAsWorkflow(dBOSContext interface{}, fn interface{}, input interface{}, opts ...interface{}) *MockDBOSContext_RunAsWorkflow_Call {
	return &MockDBOSContext_RunAsWorkflow_Call{Call: _e.mock.On("RunAsWorkflow",
		append([]interface{}{dBOSContext, fn, input}, opts...)...)}
}

func (_c *MockDBOSContext_RunAsWorkflow_Call) Run(run func(dBOSContext dbos.DBOSContext, fn dbos.WorkflowFunc, input any, opts ...dbos.WorkflowOption)) *MockDBOSContext_RunAsWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 dbos.WorkflowFunc
		if args[1] != nil {
			arg1 = args[1].(dbos.WorkflowFunc)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 []dbos.WorkflowOption
		var variadicArgs []dbos.WorkflowOption
		if len(args) > 3 {
			variadicArgs = args[3].([]dbos.WorkflowOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RunAsWorkflow_Call) Return(workflowHandle dbos.WorkflowHandle[any], err error) *MockDBOSContext_RunAsWorkflow_Call {
	_c.Call.Return(workflowHandle, err)
	return _c
}

func (_c *MockDBOSContext_RunAsWorkflow_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, fn dbos.WorkflowFunc, input any, opts ...dbos.WorkflowOption) (dbos.WorkflowHandle[any], error)) *MockDBOSContext_RunAsWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Send(dBOSContext dbos.DBOSContext, input dbos.WorkflowSendInputInternal) error {
	ret := _mock.Called(dBOSContext, input)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowSendInputInternal) error); ok {
		r0 = returnFunc(dBOSContext, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockDBOSContext_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - input dbos.WorkflowSendInputInternal
func (_e *MockDBOSContext_Expecter) Send(dBOSContext interface{}, input interface{}) *MockDBOSContext_Send_Call {
	return &MockDBOSContext_Send_Call{Call: _e.mock.On("Send", dBOSContext, input)}
}

func (_c *MockDBOSContext_Send_Call) Run(run func(dBOSContext dbos.DBOSContext, input dbos.WorkflowSendInputInternal)) *MockDBOSContext_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 dbos.WorkflowSendInputInternal
		if args[1] != nil {
			arg1 = args[1].(dbos.WorkflowSendInputInternal)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Send_Call) Return(err error) *MockDBOSContext_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_Send_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, input dbos.WorkflowSendInputInternal) error) *MockDBOSContext_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetEvent provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) SetEvent(dBOSContext dbos.DBOSContext, input dbos.WorkflowSetEventInput) error {
	ret := _mock.Called(dBOSContext, input)

	if len(ret) == 0 {
		panic("no return value specified for SetEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.DBOSContext, dbos.WorkflowSetEventInput) error); ok {
		r0 = returnFunc(dBOSContext, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_SetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEvent'
type MockDBOSContext_SetEvent_Call struct {
	*mock.Call
}

// SetEvent is a helper method to define mock.On call
//   - dBOSContext dbos.DBOSContext
//   - input dbos.WorkflowSetEventInput
func (_e *MockDBOSContext_Expecter) SetEvent(dBOSContext interface{}, input interface{}) *MockDBOSContext_SetEvent_Call {
	return &MockDBOSContext_SetEvent_Call{Call: _e.mock.On("SetEvent", dBOSContext, input)}
}

func (_c *MockDBOSContext_SetEvent_Call) Run(run func(dBOSContext dbos.DBOSContext, input dbos.WorkflowSetEventInput)) *MockDBOSContext_SetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.DBOSContext
		if args[0] != nil {
			arg0 = args[0].(dbos.DBOSContext)
		}
		var arg1 dbos.WorkflowSetEventInput
		if args[1] != nil {
			arg1 = args[1].(dbos.WorkflowSetEventInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_SetEvent_Call) Return(err error) *MockDBOSContext_SetEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_SetEvent_Call) RunAndReturn(run func(dBOSContext dbos.DBOSContext, input dbos.WorkflowSetEventInput) error) *MockDBOSContext_SetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Shutdown() {
	_mock.Called()
	return
}

// MockDBOSContext_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockDBOSContext_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Shutdown() *MockDBOSContext_Shutdown_Call {
	return &MockDBOSContext_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockDBOSContext_Shutdown_Call) Run(run func()) *MockDBOSContext_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Shutdown_Call) Return() *MockDBOSContext_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDBOSContext_Shutdown_Call) RunAndReturn(run func()) *MockDBOSContext_Shutdown_Call {
	_c.Run(run)
	return _c
}

// Sleep provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Sleep(duration time.Duration) (time.Duration, error) {
	ret := _mock.Called(duration)

	if len(ret) == 0 {
		panic("no return value specified for Sleep")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Duration) (time.Duration, error)); ok {
		return returnFunc(duration)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Duration) time.Duration); ok {
		r0 = returnFunc(duration)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = returnFunc(duration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_Sleep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sleep'
type MockDBOSContext_Sleep_Call struct {
	*mock.Call
}

// Sleep is a helper method to define mock.On call
//   - duration time.Duration
func (_e *MockDBOSContext_Expecter) Sleep(duration interface{}) *MockDBOSContext_Sleep_Call {
	return &MockDBOSContext_Sleep_Call{Call: _e.mock.On("Sleep", duration)}
}

func (_c *MockDBOSContext_Sleep_Call) Run(run func(duration time.Duration)) *MockDBOSContext_Sleep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Duration
		if args[0] != nil {
			arg0 = args[0].(time.Duration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Sleep_Call) Return(duration1 time.Duration, err error) *MockDBOSContext_Sleep_Call {
	_c.Call.Return(duration1, err)
	return _c
}

func (_c *MockDBOSContext_Sleep_Call) RunAndReturn(run func(duration time.Duration) (time.Duration, error)) *MockDBOSContext_Sleep_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Value(key any) any {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func(any) any); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockDBOSContext_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockDBOSContext_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key any
func (_e *MockDBOSContext_Expecter) Value(key interface{}) *MockDBOSContext_Value_Call {
	return &MockDBOSContext_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *MockDBOSContext_Value_Call) Run(run func(key any)) *MockDBOSContext_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Value_Call) Return(v any) *MockDBOSContext_Value_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockDBOSContext_Value_Call) RunAndReturn(run func(key any) any) *MockDBOSContext_Value_Call {
	_c.Call.Return(run)
	return _c
}
