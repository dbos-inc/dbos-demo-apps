// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"sync"
	"time"

	"github.com/dbos-inc/dbos-transact-go/dbos"
	"github.com/robfig/cron/v3"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDBOSContext creates a new instance of MockDBOSContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBOSContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBOSContext {
	mock := &MockDBOSContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBOSContext is an autogenerated mock type for the DBOSContext type
type MockDBOSContext struct {
	mock.Mock
}

type MockDBOSContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBOSContext) EXPECT() *MockDBOSContext_Expecter {
	return &MockDBOSContext_Expecter{mock: &_m.Mock}
}

// AwaitWorkflowResult provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) AwaitWorkflowResult(workflowID string) (any, error) {
	ret := _mock.Called(workflowID)

	if len(ret) == 0 {
		panic("no return value specified for AwaitWorkflowResult")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (any, error)); ok {
		return returnFunc(workflowID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) any); ok {
		r0 = returnFunc(workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(workflowID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_AwaitWorkflowResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AwaitWorkflowResult'
type MockDBOSContext_AwaitWorkflowResult_Call struct {
	*mock.Call
}

// AwaitWorkflowResult is a helper method to define mock.On call
//   - workflowID string
func (_e *MockDBOSContext_Expecter) AwaitWorkflowResult(workflowID interface{}) *MockDBOSContext_AwaitWorkflowResult_Call {
	return &MockDBOSContext_AwaitWorkflowResult_Call{Call: _e.mock.On("AwaitWorkflowResult", workflowID)}
}

func (_c *MockDBOSContext_AwaitWorkflowResult_Call) Run(run func(workflowID string)) *MockDBOSContext_AwaitWorkflowResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_AwaitWorkflowResult_Call) Return(v any, err error) *MockDBOSContext_AwaitWorkflowResult_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_AwaitWorkflowResult_Call) RunAndReturn(run func(workflowID string) (any, error)) *MockDBOSContext_AwaitWorkflowResult_Call {
	_c.Call.Return(run)
	return _c
}

// CheckChildWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) CheckChildWorkflow(parentWorkflowID string, stepCounter int) (*string, error) {
	ret := _mock.Called(parentWorkflowID, stepCounter)

	if len(ret) == 0 {
		panic("no return value specified for CheckChildWorkflow")
	}

	var r0 *string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int) (*string, error)); ok {
		return returnFunc(parentWorkflowID, stepCounter)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int) *string); ok {
		r0 = returnFunc(parentWorkflowID, stepCounter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = returnFunc(parentWorkflowID, stepCounter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_CheckChildWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckChildWorkflow'
type MockDBOSContext_CheckChildWorkflow_Call struct {
	*mock.Call
}

// CheckChildWorkflow is a helper method to define mock.On call
//   - parentWorkflowID string
//   - stepCounter int
func (_e *MockDBOSContext_Expecter) CheckChildWorkflow(parentWorkflowID interface{}, stepCounter interface{}) *MockDBOSContext_CheckChildWorkflow_Call {
	return &MockDBOSContext_CheckChildWorkflow_Call{Call: _e.mock.On("CheckChildWorkflow", parentWorkflowID, stepCounter)}
}

func (_c *MockDBOSContext_CheckChildWorkflow_Call) Run(run func(parentWorkflowID string, stepCounter int)) *MockDBOSContext_CheckChildWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_CheckChildWorkflow_Call) Return(s *string, err error) *MockDBOSContext_CheckChildWorkflow_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDBOSContext_CheckChildWorkflow_Call) RunAndReturn(run func(parentWorkflowID string, stepCounter int) (*string, error)) *MockDBOSContext_CheckChildWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// CheckOperationExecution provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) CheckOperationExecution(workflowID string, stepID int, stepName string) (*dbos.RecordedResult, error) {
	ret := _mock.Called(workflowID, stepID, stepName)

	if len(ret) == 0 {
		panic("no return value specified for CheckOperationExecution")
	}

	var r0 *dbos.RecordedResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, string) (*dbos.RecordedResult, error)); ok {
		return returnFunc(workflowID, stepID, stepName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, string) *dbos.RecordedResult); ok {
		r0 = returnFunc(workflowID, stepID, stepName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbos.RecordedResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, string) error); ok {
		r1 = returnFunc(workflowID, stepID, stepName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_CheckOperationExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOperationExecution'
type MockDBOSContext_CheckOperationExecution_Call struct {
	*mock.Call
}

// CheckOperationExecution is a helper method to define mock.On call
//   - workflowID string
//   - stepID int
//   - stepName string
func (_e *MockDBOSContext_Expecter) CheckOperationExecution(workflowID interface{}, stepID interface{}, stepName interface{}) *MockDBOSContext_CheckOperationExecution_Call {
	return &MockDBOSContext_CheckOperationExecution_Call{Call: _e.mock.On("CheckOperationExecution", workflowID, stepID, stepName)}
}

func (_c *MockDBOSContext_CheckOperationExecution_Call) Run(run func(workflowID string, stepID int, stepName string)) *MockDBOSContext_CheckOperationExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBOSContext_CheckOperationExecution_Call) Return(recordedResult *dbos.RecordedResult, err error) *MockDBOSContext_CheckOperationExecution_Call {
	_c.Call.Return(recordedResult, err)
	return _c
}

func (_c *MockDBOSContext_CheckOperationExecution_Call) RunAndReturn(run func(workflowID string, stepID int, stepName string) (*dbos.RecordedResult, error)) *MockDBOSContext_CheckOperationExecution_Call {
	_c.Call.Return(run)
	return _c
}

// Deadline provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Deadline() (time.Time, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockDBOSContext_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type MockDBOSContext_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Deadline() *MockDBOSContext_Deadline_Call {
	return &MockDBOSContext_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *MockDBOSContext_Deadline_Call) Run(run func()) *MockDBOSContext_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Deadline_Call) Return(deadline time.Time, ok bool) *MockDBOSContext_Deadline_Call {
	_c.Call.Return(deadline, ok)
	return _c
}

func (_c *MockDBOSContext_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *MockDBOSContext_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockDBOSContext_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockDBOSContext_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Done() *MockDBOSContext_Done_Call {
	return &MockDBOSContext_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockDBOSContext_Done_Call) Run(run func()) *MockDBOSContext_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Done_Call) Return(valCh <-chan struct{}) *MockDBOSContext_Done_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockDBOSContext_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockDBOSContext_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockDBOSContext_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Err() *MockDBOSContext_Err_Call {
	return &MockDBOSContext_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockDBOSContext_Err_Call) Run(run func()) *MockDBOSContext_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Err_Call) Return(err error) *MockDBOSContext_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_Err_Call) RunAndReturn(run func() error) *MockDBOSContext_Err_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetApplicationID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDBOSContext_GetApplicationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationID'
type MockDBOSContext_GetApplicationID_Call struct {
	*mock.Call
}

// GetApplicationID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetApplicationID() *MockDBOSContext_GetApplicationID_Call {
	return &MockDBOSContext_GetApplicationID_Call{Call: _e.mock.On("GetApplicationID")}
}

func (_c *MockDBOSContext_GetApplicationID_Call) Run(run func()) *MockDBOSContext_GetApplicationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetApplicationID_Call) Return(s string) *MockDBOSContext_GetApplicationID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDBOSContext_GetApplicationID_Call) RunAndReturn(run func() string) *MockDBOSContext_GetApplicationID_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationVersion provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetApplicationVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDBOSContext_GetApplicationVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationVersion'
type MockDBOSContext_GetApplicationVersion_Call struct {
	*mock.Call
}

// GetApplicationVersion is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetApplicationVersion() *MockDBOSContext_GetApplicationVersion_Call {
	return &MockDBOSContext_GetApplicationVersion_Call{Call: _e.mock.On("GetApplicationVersion")}
}

func (_c *MockDBOSContext_GetApplicationVersion_Call) Run(run func()) *MockDBOSContext_GetApplicationVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetApplicationVersion_Call) Return(s string) *MockDBOSContext_GetApplicationVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDBOSContext_GetApplicationVersion_Call) RunAndReturn(run func() string) *MockDBOSContext_GetApplicationVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockDBOSContext_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockDBOSContext_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetContext() *MockDBOSContext_GetContext_Call {
	return &MockDBOSContext_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockDBOSContext_GetContext_Call) Run(run func()) *MockDBOSContext_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetContext_Call) Return(context1 context.Context) *MockDBOSContext_GetContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockDBOSContext_GetContext_Call) RunAndReturn(run func() context.Context) *MockDBOSContext_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvent provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetEvent(input dbos.WorkflowGetEventInput) (any, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.WorkflowGetEventInput) (any, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.WorkflowGetEventInput) any); ok {
		r0 = returnFunc(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.WorkflowGetEventInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_GetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvent'
type MockDBOSContext_GetEvent_Call struct {
	*mock.Call
}

// GetEvent is a helper method to define mock.On call
//   - input dbos.WorkflowGetEventInput
func (_e *MockDBOSContext_Expecter) GetEvent(input interface{}) *MockDBOSContext_GetEvent_Call {
	return &MockDBOSContext_GetEvent_Call{Call: _e.mock.On("GetEvent", input)}
}

func (_c *MockDBOSContext_GetEvent_Call) Run(run func(input dbos.WorkflowGetEventInput)) *MockDBOSContext_GetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.WorkflowGetEventInput
		if args[0] != nil {
			arg0 = args[0].(dbos.WorkflowGetEventInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_GetEvent_Call) Return(v any, err error) *MockDBOSContext_GetEvent_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_GetEvent_Call) RunAndReturn(run func(input dbos.WorkflowGetEventInput) (any, error)) *MockDBOSContext_GetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutorID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetExecutorID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutorID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDBOSContext_GetExecutorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutorID'
type MockDBOSContext_GetExecutorID_Call struct {
	*mock.Call
}

// GetExecutorID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetExecutorID() *MockDBOSContext_GetExecutorID_Call {
	return &MockDBOSContext_GetExecutorID_Call{Call: _e.mock.On("GetExecutorID")}
}

func (_c *MockDBOSContext_GetExecutorID_Call) Run(run func()) *MockDBOSContext_GetExecutorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetExecutorID_Call) Return(s string) *MockDBOSContext_GetExecutorID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDBOSContext_GetExecutorID_Call) RunAndReturn(run func() string) *MockDBOSContext_GetExecutorID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemDB provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetSystemDB() dbos.SystemDatabase {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSystemDB")
	}

	var r0 dbos.SystemDatabase
	if returnFunc, ok := ret.Get(0).(func() dbos.SystemDatabase); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbos.SystemDatabase)
		}
	}
	return r0
}

// MockDBOSContext_GetSystemDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemDB'
type MockDBOSContext_GetSystemDB_Call struct {
	*mock.Call
}

// GetSystemDB is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetSystemDB() *MockDBOSContext_GetSystemDB_Call {
	return &MockDBOSContext_GetSystemDB_Call{Call: _e.mock.On("GetSystemDB")}
}

func (_c *MockDBOSContext_GetSystemDB_Call) Run(run func()) *MockDBOSContext_GetSystemDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetSystemDB_Call) Return(systemDatabase dbos.SystemDatabase) *MockDBOSContext_GetSystemDB_Call {
	_c.Call.Return(systemDatabase)
	return _c
}

func (_c *MockDBOSContext_GetSystemDB_Call) RunAndReturn(run func() dbos.SystemDatabase) *MockDBOSContext_GetSystemDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowID provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetWorkflowID() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_GetWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowID'
type MockDBOSContext_GetWorkflowID_Call struct {
	*mock.Call
}

// GetWorkflowID is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetWorkflowID() *MockDBOSContext_GetWorkflowID_Call {
	return &MockDBOSContext_GetWorkflowID_Call{Call: _e.mock.On("GetWorkflowID")}
}

func (_c *MockDBOSContext_GetWorkflowID_Call) Run(run func()) *MockDBOSContext_GetWorkflowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetWorkflowID_Call) Return(s string, err error) *MockDBOSContext_GetWorkflowID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDBOSContext_GetWorkflowID_Call) RunAndReturn(run func() (string, error)) *MockDBOSContext_GetWorkflowID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowScheduler provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetWorkflowScheduler() *cron.Cron {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowScheduler")
	}

	var r0 *cron.Cron
	if returnFunc, ok := ret.Get(0).(func() *cron.Cron); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cron.Cron)
		}
	}
	return r0
}

// MockDBOSContext_GetWorkflowScheduler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowScheduler'
type MockDBOSContext_GetWorkflowScheduler_Call struct {
	*mock.Call
}

// GetWorkflowScheduler is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetWorkflowScheduler() *MockDBOSContext_GetWorkflowScheduler_Call {
	return &MockDBOSContext_GetWorkflowScheduler_Call{Call: _e.mock.On("GetWorkflowScheduler")}
}

func (_c *MockDBOSContext_GetWorkflowScheduler_Call) Run(run func()) *MockDBOSContext_GetWorkflowScheduler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetWorkflowScheduler_Call) Return(cron1 *cron.Cron) *MockDBOSContext_GetWorkflowScheduler_Call {
	_c.Call.Return(cron1)
	return _c
}

func (_c *MockDBOSContext_GetWorkflowScheduler_Call) RunAndReturn(run func() *cron.Cron) *MockDBOSContext_GetWorkflowScheduler_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowWg provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) GetWorkflowWg() *sync.WaitGroup {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowWg")
	}

	var r0 *sync.WaitGroup
	if returnFunc, ok := ret.Get(0).(func() *sync.WaitGroup); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sync.WaitGroup)
		}
	}
	return r0
}

// MockDBOSContext_GetWorkflowWg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowWg'
type MockDBOSContext_GetWorkflowWg_Call struct {
	*mock.Call
}

// GetWorkflowWg is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) GetWorkflowWg() *MockDBOSContext_GetWorkflowWg_Call {
	return &MockDBOSContext_GetWorkflowWg_Call{Call: _e.mock.On("GetWorkflowWg")}
}

func (_c *MockDBOSContext_GetWorkflowWg_Call) Run(run func()) *MockDBOSContext_GetWorkflowWg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_GetWorkflowWg_Call) Return(waitGroup *sync.WaitGroup) *MockDBOSContext_GetWorkflowWg_Call {
	_c.Call.Return(waitGroup)
	return _c
}

func (_c *MockDBOSContext_GetWorkflowWg_Call) RunAndReturn(run func() *sync.WaitGroup) *MockDBOSContext_GetWorkflowWg_Call {
	_c.Call.Return(run)
	return _c
}

// InsertWorkflowStatus provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) InsertWorkflowStatus(status dbos.WorkflowStatus, maxRetries int) (*dbos.InsertWorkflowResult, error) {
	ret := _mock.Called(status, maxRetries)

	if len(ret) == 0 {
		panic("no return value specified for InsertWorkflowStatus")
	}

	var r0 *dbos.InsertWorkflowResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.WorkflowStatus, int) (*dbos.InsertWorkflowResult, error)); ok {
		return returnFunc(status, maxRetries)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.WorkflowStatus, int) *dbos.InsertWorkflowResult); ok {
		r0 = returnFunc(status, maxRetries)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbos.InsertWorkflowResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.WorkflowStatus, int) error); ok {
		r1 = returnFunc(status, maxRetries)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_InsertWorkflowStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertWorkflowStatus'
type MockDBOSContext_InsertWorkflowStatus_Call struct {
	*mock.Call
}

// InsertWorkflowStatus is a helper method to define mock.On call
//   - status dbos.WorkflowStatus
//   - maxRetries int
func (_e *MockDBOSContext_Expecter) InsertWorkflowStatus(status interface{}, maxRetries interface{}) *MockDBOSContext_InsertWorkflowStatus_Call {
	return &MockDBOSContext_InsertWorkflowStatus_Call{Call: _e.mock.On("InsertWorkflowStatus", status, maxRetries)}
}

func (_c *MockDBOSContext_InsertWorkflowStatus_Call) Run(run func(status dbos.WorkflowStatus, maxRetries int)) *MockDBOSContext_InsertWorkflowStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.WorkflowStatus
		if args[0] != nil {
			arg0 = args[0].(dbos.WorkflowStatus)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_InsertWorkflowStatus_Call) Return(insertWorkflowResult *dbos.InsertWorkflowResult, err error) *MockDBOSContext_InsertWorkflowStatus_Call {
	_c.Call.Return(insertWorkflowResult, err)
	return _c
}

func (_c *MockDBOSContext_InsertWorkflowStatus_Call) RunAndReturn(run func(status dbos.WorkflowStatus, maxRetries int) (*dbos.InsertWorkflowResult, error)) *MockDBOSContext_InsertWorkflowStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Launch provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Launch() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Launch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_Launch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Launch'
type MockDBOSContext_Launch_Call struct {
	*mock.Call
}

// Launch is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Launch() *MockDBOSContext_Launch_Call {
	return &MockDBOSContext_Launch_Call{Call: _e.mock.On("Launch")}
}

func (_c *MockDBOSContext_Launch_Call) Run(run func()) *MockDBOSContext_Launch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Launch_Call) Return(err error) *MockDBOSContext_Launch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_Launch_Call) RunAndReturn(run func() error) *MockDBOSContext_Launch_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflows provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) ListWorkflows(input dbos.ListWorkflowsDBInput) ([]dbos.WorkflowStatus, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflows")
	}

	var r0 []dbos.WorkflowStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.ListWorkflowsDBInput) ([]dbos.WorkflowStatus, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.ListWorkflowsDBInput) []dbos.WorkflowStatus); ok {
		r0 = returnFunc(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbos.WorkflowStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.ListWorkflowsDBInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_ListWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflows'
type MockDBOSContext_ListWorkflows_Call struct {
	*mock.Call
}

// ListWorkflows is a helper method to define mock.On call
//   - input dbos.ListWorkflowsDBInput
func (_e *MockDBOSContext_Expecter) ListWorkflows(input interface{}) *MockDBOSContext_ListWorkflows_Call {
	return &MockDBOSContext_ListWorkflows_Call{Call: _e.mock.On("ListWorkflows", input)}
}

func (_c *MockDBOSContext_ListWorkflows_Call) Run(run func(input dbos.ListWorkflowsDBInput)) *MockDBOSContext_ListWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.ListWorkflowsDBInput
		if args[0] != nil {
			arg0 = args[0].(dbos.ListWorkflowsDBInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_ListWorkflows_Call) Return(workflowStatuss []dbos.WorkflowStatus, err error) *MockDBOSContext_ListWorkflows_Call {
	_c.Call.Return(workflowStatuss, err)
	return _c
}

func (_c *MockDBOSContext_ListWorkflows_Call) RunAndReturn(run func(input dbos.ListWorkflowsDBInput) ([]dbos.WorkflowStatus, error)) *MockDBOSContext_ListWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// RecordChildGetResult provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RecordChildGetResult(input dbos.RecordChildGetResultDBInput) error {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RecordChildGetResult")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.RecordChildGetResultDBInput) error); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_RecordChildGetResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordChildGetResult'
type MockDBOSContext_RecordChildGetResult_Call struct {
	*mock.Call
}

// RecordChildGetResult is a helper method to define mock.On call
//   - input dbos.RecordChildGetResultDBInput
func (_e *MockDBOSContext_Expecter) RecordChildGetResult(input interface{}) *MockDBOSContext_RecordChildGetResult_Call {
	return &MockDBOSContext_RecordChildGetResult_Call{Call: _e.mock.On("RecordChildGetResult", input)}
}

func (_c *MockDBOSContext_RecordChildGetResult_Call) Run(run func(input dbos.RecordChildGetResultDBInput)) *MockDBOSContext_RecordChildGetResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.RecordChildGetResultDBInput
		if args[0] != nil {
			arg0 = args[0].(dbos.RecordChildGetResultDBInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RecordChildGetResult_Call) Return(err error) *MockDBOSContext_RecordChildGetResult_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_RecordChildGetResult_Call) RunAndReturn(run func(input dbos.RecordChildGetResultDBInput) error) *MockDBOSContext_RecordChildGetResult_Call {
	_c.Call.Return(run)
	return _c
}

// RecordChildWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RecordChildWorkflow(input dbos.RecordChildWorkflowDBInput) error {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RecordChildWorkflow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.RecordChildWorkflowDBInput) error); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_RecordChildWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordChildWorkflow'
type MockDBOSContext_RecordChildWorkflow_Call struct {
	*mock.Call
}

// RecordChildWorkflow is a helper method to define mock.On call
//   - input dbos.RecordChildWorkflowDBInput
func (_e *MockDBOSContext_Expecter) RecordChildWorkflow(input interface{}) *MockDBOSContext_RecordChildWorkflow_Call {
	return &MockDBOSContext_RecordChildWorkflow_Call{Call: _e.mock.On("RecordChildWorkflow", input)}
}

func (_c *MockDBOSContext_RecordChildWorkflow_Call) Run(run func(input dbos.RecordChildWorkflowDBInput)) *MockDBOSContext_RecordChildWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.RecordChildWorkflowDBInput
		if args[0] != nil {
			arg0 = args[0].(dbos.RecordChildWorkflowDBInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RecordChildWorkflow_Call) Return(err error) *MockDBOSContext_RecordChildWorkflow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_RecordChildWorkflow_Call) RunAndReturn(run func(input dbos.RecordChildWorkflowDBInput) error) *MockDBOSContext_RecordChildWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// RecordOperationResult provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RecordOperationResult(input dbos.RecordOperationResultDBInput) error {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RecordOperationResult")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.RecordOperationResultDBInput) error); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_RecordOperationResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordOperationResult'
type MockDBOSContext_RecordOperationResult_Call struct {
	*mock.Call
}

// RecordOperationResult is a helper method to define mock.On call
//   - input dbos.RecordOperationResultDBInput
func (_e *MockDBOSContext_Expecter) RecordOperationResult(input interface{}) *MockDBOSContext_RecordOperationResult_Call {
	return &MockDBOSContext_RecordOperationResult_Call{Call: _e.mock.On("RecordOperationResult", input)}
}

func (_c *MockDBOSContext_RecordOperationResult_Call) Run(run func(input dbos.RecordOperationResultDBInput)) *MockDBOSContext_RecordOperationResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.RecordOperationResultDBInput
		if args[0] != nil {
			arg0 = args[0].(dbos.RecordOperationResultDBInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RecordOperationResult_Call) Return(err error) *MockDBOSContext_RecordOperationResult_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_RecordOperationResult_Call) RunAndReturn(run func(input dbos.RecordOperationResultDBInput) error) *MockDBOSContext_RecordOperationResult_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Recv(input dbos.WorkflowRecvInput) (any, error) {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.WorkflowRecvInput) (any, error)); ok {
		return returnFunc(input)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.WorkflowRecvInput) any); ok {
		r0 = returnFunc(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.WorkflowRecvInput) error); ok {
		r1 = returnFunc(input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type MockDBOSContext_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
//   - input dbos.WorkflowRecvInput
func (_e *MockDBOSContext_Expecter) Recv(input interface{}) *MockDBOSContext_Recv_Call {
	return &MockDBOSContext_Recv_Call{Call: _e.mock.On("Recv", input)}
}

func (_c *MockDBOSContext_Recv_Call) Run(run func(input dbos.WorkflowRecvInput)) *MockDBOSContext_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.WorkflowRecvInput
		if args[0] != nil {
			arg0 = args[0].(dbos.WorkflowRecvInput)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Recv_Call) Return(v any, err error) *MockDBOSContext_Recv_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_Recv_Call) RunAndReturn(run func(input dbos.WorkflowRecvInput) (any, error)) *MockDBOSContext_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterScheduledWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RegisterScheduledWorkflow(fqn string, fn dbos.WrappedWorkflowFunc, cronSchedule string, maxRetries int) {
	_mock.Called(fqn, fn, cronSchedule, maxRetries)
	return
}

// MockDBOSContext_RegisterScheduledWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterScheduledWorkflow'
type MockDBOSContext_RegisterScheduledWorkflow_Call struct {
	*mock.Call
}

// RegisterScheduledWorkflow is a helper method to define mock.On call
//   - fqn string
//   - fn dbos.WrappedWorkflowFunc
//   - cronSchedule string
//   - maxRetries int
func (_e *MockDBOSContext_Expecter) RegisterScheduledWorkflow(fqn interface{}, fn interface{}, cronSchedule interface{}, maxRetries interface{}) *MockDBOSContext_RegisterScheduledWorkflow_Call {
	return &MockDBOSContext_RegisterScheduledWorkflow_Call{Call: _e.mock.On("RegisterScheduledWorkflow", fqn, fn, cronSchedule, maxRetries)}
}

func (_c *MockDBOSContext_RegisterScheduledWorkflow_Call) Run(run func(fqn string, fn dbos.WrappedWorkflowFunc, cronSchedule string, maxRetries int)) *MockDBOSContext_RegisterScheduledWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 dbos.WrappedWorkflowFunc
		if args[1] != nil {
			arg1 = args[1].(dbos.WrappedWorkflowFunc)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RegisterScheduledWorkflow_Call) Return() *MockDBOSContext_RegisterScheduledWorkflow_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDBOSContext_RegisterScheduledWorkflow_Call) RunAndReturn(run func(fqn string, fn dbos.WrappedWorkflowFunc, cronSchedule string, maxRetries int)) *MockDBOSContext_RegisterScheduledWorkflow_Call {
	_c.Run(run)
	return _c
}

// RegisterWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RegisterWorkflow(fqn string, fn dbos.WrappedWorkflowFunc, maxRetries int) {
	_mock.Called(fqn, fn, maxRetries)
	return
}

// MockDBOSContext_RegisterWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterWorkflow'
type MockDBOSContext_RegisterWorkflow_Call struct {
	*mock.Call
}

// RegisterWorkflow is a helper method to define mock.On call
//   - fqn string
//   - fn dbos.WrappedWorkflowFunc
//   - maxRetries int
func (_e *MockDBOSContext_Expecter) RegisterWorkflow(fqn interface{}, fn interface{}, maxRetries interface{}) *MockDBOSContext_RegisterWorkflow_Call {
	return &MockDBOSContext_RegisterWorkflow_Call{Call: _e.mock.On("RegisterWorkflow", fqn, fn, maxRetries)}
}

func (_c *MockDBOSContext_RegisterWorkflow_Call) Run(run func(fqn string, fn dbos.WrappedWorkflowFunc, maxRetries int)) *MockDBOSContext_RegisterWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 dbos.WrappedWorkflowFunc
		if args[1] != nil {
			arg1 = args[1].(dbos.WrappedWorkflowFunc)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RegisterWorkflow_Call) Return() *MockDBOSContext_RegisterWorkflow_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDBOSContext_RegisterWorkflow_Call) RunAndReturn(run func(fqn string, fn dbos.WrappedWorkflowFunc, maxRetries int)) *MockDBOSContext_RegisterWorkflow_Call {
	_c.Run(run)
	return _c
}

// RetrieveWorkflow provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RetrieveWorkflow(workflowIDs []string) ([]dbos.WorkflowStatus, error) {
	ret := _mock.Called(workflowIDs)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveWorkflow")
	}

	var r0 []dbos.WorkflowStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) ([]dbos.WorkflowStatus, error)); ok {
		return returnFunc(workflowIDs)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []dbos.WorkflowStatus); ok {
		r0 = returnFunc(workflowIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbos.WorkflowStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(workflowIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_RetrieveWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveWorkflow'
type MockDBOSContext_RetrieveWorkflow_Call struct {
	*mock.Call
}

// RetrieveWorkflow is a helper method to define mock.On call
//   - workflowIDs []string
func (_e *MockDBOSContext_Expecter) RetrieveWorkflow(workflowIDs interface{}) *MockDBOSContext_RetrieveWorkflow_Call {
	return &MockDBOSContext_RetrieveWorkflow_Call{Call: _e.mock.On("RetrieveWorkflow", workflowIDs)}
}

func (_c *MockDBOSContext_RetrieveWorkflow_Call) Run(run func(workflowIDs []string)) *MockDBOSContext_RetrieveWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RetrieveWorkflow_Call) Return(workflowStatuss []dbos.WorkflowStatus, err error) *MockDBOSContext_RetrieveWorkflow_Call {
	_c.Call.Return(workflowStatuss, err)
	return _c
}

func (_c *MockDBOSContext_RetrieveWorkflow_Call) RunAndReturn(run func(workflowIDs []string) ([]dbos.WorkflowStatus, error)) *MockDBOSContext_RetrieveWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// RunAsStep provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) RunAsStep(fn dbos.StepFunc, input any, stepName string, opts ...dbos.StepOption) (any, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(fn, input, stepName, opts)
	} else {
		tmpRet = _mock.Called(fn, input, stepName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RunAsStep")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dbos.StepFunc, any, string, ...dbos.StepOption) (any, error)); ok {
		return returnFunc(fn, input, stepName, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(dbos.StepFunc, any, string, ...dbos.StepOption) any); ok {
		r0 = returnFunc(fn, input, stepName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dbos.StepFunc, any, string, ...dbos.StepOption) error); ok {
		r1 = returnFunc(fn, input, stepName, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_RunAsStep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunAsStep'
type MockDBOSContext_RunAsStep_Call struct {
	*mock.Call
}

// RunAsStep is a helper method to define mock.On call
//   - fn dbos.StepFunc
//   - input any
//   - stepName string
//   - opts ...dbos.StepOption
func (_e *MockDBOSContext_Expecter) RunAsStep(fn interface{}, input interface{}, stepName interface{}, opts ...interface{}) *MockDBOSContext_RunAsStep_Call {
	return &MockDBOSContext_RunAsStep_Call{Call: _e.mock.On("RunAsStep",
		append([]interface{}{fn, input, stepName}, opts...)...)}
}

func (_c *MockDBOSContext_RunAsStep_Call) Run(run func(fn dbos.StepFunc, input any, stepName string, opts ...dbos.StepOption)) *MockDBOSContext_RunAsStep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.StepFunc
		if args[0] != nil {
			arg0 = args[0].(dbos.StepFunc)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []dbos.StepOption
		var variadicArgs []dbos.StepOption
		if len(args) > 3 {
			variadicArgs = args[3].([]dbos.StepOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockDBOSContext_RunAsStep_Call) Return(v any, err error) *MockDBOSContext_RunAsStep_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBOSContext_RunAsStep_Call) RunAndReturn(run func(fn dbos.StepFunc, input any, stepName string, opts ...dbos.StepOption) (any, error)) *MockDBOSContext_RunAsStep_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Send(input dbos.WorkflowSendInputInternal) error {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.WorkflowSendInputInternal) error); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockDBOSContext_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - input dbos.WorkflowSendInputInternal
func (_e *MockDBOSContext_Expecter) Send(input interface{}) *MockDBOSContext_Send_Call {
	return &MockDBOSContext_Send_Call{Call: _e.mock.On("Send", input)}
}

func (_c *MockDBOSContext_Send_Call) Run(run func(input dbos.WorkflowSendInputInternal)) *MockDBOSContext_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.WorkflowSendInputInternal
		if args[0] != nil {
			arg0 = args[0].(dbos.WorkflowSendInputInternal)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Send_Call) Return(err error) *MockDBOSContext_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_Send_Call) RunAndReturn(run func(input dbos.WorkflowSendInputInternal) error) *MockDBOSContext_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetEvent provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) SetEvent(input dbos.WorkflowSetEventInputInternal) error {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for SetEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dbos.WorkflowSetEventInputInternal) error); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_SetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEvent'
type MockDBOSContext_SetEvent_Call struct {
	*mock.Call
}

// SetEvent is a helper method to define mock.On call
//   - input dbos.WorkflowSetEventInputInternal
func (_e *MockDBOSContext_Expecter) SetEvent(input interface{}) *MockDBOSContext_SetEvent_Call {
	return &MockDBOSContext_SetEvent_Call{Call: _e.mock.On("SetEvent", input)}
}

func (_c *MockDBOSContext_SetEvent_Call) Run(run func(input dbos.WorkflowSetEventInputInternal)) *MockDBOSContext_SetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dbos.WorkflowSetEventInputInternal
		if args[0] != nil {
			arg0 = args[0].(dbos.WorkflowSetEventInputInternal)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_SetEvent_Call) Return(err error) *MockDBOSContext_SetEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBOSContext_SetEvent_Call) RunAndReturn(run func(input dbos.WorkflowSetEventInputInternal) error) *MockDBOSContext_SetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Shutdown() {
	_mock.Called()
	return
}

// MockDBOSContext_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockDBOSContext_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockDBOSContext_Expecter) Shutdown() *MockDBOSContext_Shutdown_Call {
	return &MockDBOSContext_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockDBOSContext_Shutdown_Call) Run(run func()) *MockDBOSContext_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDBOSContext_Shutdown_Call) Return() *MockDBOSContext_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDBOSContext_Shutdown_Call) RunAndReturn(run func()) *MockDBOSContext_Shutdown_Call {
	_c.Run(run)
	return _c
}

// Sleep provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Sleep(duration time.Duration) (time.Duration, error) {
	ret := _mock.Called(duration)

	if len(ret) == 0 {
		panic("no return value specified for Sleep")
	}

	var r0 time.Duration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Duration) (time.Duration, error)); ok {
		return returnFunc(duration)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Duration) time.Duration); ok {
		r0 = returnFunc(duration)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	if returnFunc, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = returnFunc(duration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBOSContext_Sleep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sleep'
type MockDBOSContext_Sleep_Call struct {
	*mock.Call
}

// Sleep is a helper method to define mock.On call
//   - duration time.Duration
func (_e *MockDBOSContext_Expecter) Sleep(duration interface{}) *MockDBOSContext_Sleep_Call {
	return &MockDBOSContext_Sleep_Call{Call: _e.mock.On("Sleep", duration)}
}

func (_c *MockDBOSContext_Sleep_Call) Run(run func(duration time.Duration)) *MockDBOSContext_Sleep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Duration
		if args[0] != nil {
			arg0 = args[0].(time.Duration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Sleep_Call) Return(duration1 time.Duration, err error) *MockDBOSContext_Sleep_Call {
	_c.Call.Return(duration1, err)
	return _c
}

func (_c *MockDBOSContext_Sleep_Call) RunAndReturn(run func(duration time.Duration) (time.Duration, error)) *MockDBOSContext_Sleep_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflowOutcome provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) UpdateWorkflowOutcome(workflowID string, status dbos.WorkflowStatusType, err error, output any) error {
	ret := _mock.Called(workflowID, status, err, output)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflowOutcome")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, dbos.WorkflowStatusType, error, any) error); ok {
		r0 = returnFunc(workflowID, status, err, output)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBOSContext_UpdateWorkflowOutcome_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowOutcome'
type MockDBOSContext_UpdateWorkflowOutcome_Call struct {
	*mock.Call
}

// UpdateWorkflowOutcome is a helper method to define mock.On call
//   - workflowID string
//   - status dbos.WorkflowStatusType
//   - err error
//   - output any
func (_e *MockDBOSContext_Expecter) UpdateWorkflowOutcome(workflowID interface{}, status interface{}, err interface{}, output interface{}) *MockDBOSContext_UpdateWorkflowOutcome_Call {
	return &MockDBOSContext_UpdateWorkflowOutcome_Call{Call: _e.mock.On("UpdateWorkflowOutcome", workflowID, status, err, output)}
}

func (_c *MockDBOSContext_UpdateWorkflowOutcome_Call) Run(run func(workflowID string, status dbos.WorkflowStatusType, err error, output any)) *MockDBOSContext_UpdateWorkflowOutcome_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 dbos.WorkflowStatusType
		if args[1] != nil {
			arg1 = args[1].(dbos.WorkflowStatusType)
		}
		var arg2 error
		if args[2] != nil {
			arg2 = args[2].(error)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBOSContext_UpdateWorkflowOutcome_Call) Return(err1 error) *MockDBOSContext_UpdateWorkflowOutcome_Call {
	_c.Call.Return(err1)
	return _c
}

func (_c *MockDBOSContext_UpdateWorkflowOutcome_Call) RunAndReturn(run func(workflowID string, status dbos.WorkflowStatusType, err error, output any) error) *MockDBOSContext_UpdateWorkflowOutcome_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) Value(key any) any {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func(any) any); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockDBOSContext_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockDBOSContext_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key any
func (_e *MockDBOSContext_Expecter) Value(key interface{}) *MockDBOSContext_Value_Call {
	return &MockDBOSContext_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *MockDBOSContext_Value_Call) Run(run func(key any)) *MockDBOSContext_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBOSContext_Value_Call) Return(v any) *MockDBOSContext_Value_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockDBOSContext_Value_Call) RunAndReturn(run func(key any) any) *MockDBOSContext_Value_Call {
	_c.Call.Return(run)
	return _c
}

// WithValue provides a mock function for the type MockDBOSContext
func (_mock *MockDBOSContext) WithValue(key any, val any) dbos.DBOSContext {
	ret := _mock.Called(key, val)

	if len(ret) == 0 {
		panic("no return value specified for WithValue")
	}

	var r0 dbos.DBOSContext
	if returnFunc, ok := ret.Get(0).(func(any, any) dbos.DBOSContext); ok {
		r0 = returnFunc(key, val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbos.DBOSContext)
		}
	}
	return r0
}

// MockDBOSContext_WithValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithValue'
type MockDBOSContext_WithValue_Call struct {
	*mock.Call
}

// WithValue is a helper method to define mock.On call
//   - key any
//   - val any
func (_e *MockDBOSContext_Expecter) WithValue(key interface{}, val interface{}) *MockDBOSContext_WithValue_Call {
	return &MockDBOSContext_WithValue_Call{Call: _e.mock.On("WithValue", key, val)}
}

func (_c *MockDBOSContext_WithValue_Call) Run(run func(key any, val any)) *MockDBOSContext_WithValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBOSContext_WithValue_Call) Return(dBOSContext dbos.DBOSContext) *MockDBOSContext_WithValue_Call {
	_c.Call.Return(dBOSContext)
	return _c
}

func (_c *MockDBOSContext_WithValue_Call) RunAndReturn(run func(key any, val any) dbos.DBOSContext) *MockDBOSContext_WithValue_Call {
	_c.Call.Return(run)
	return _c
}
