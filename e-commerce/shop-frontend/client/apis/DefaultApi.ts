/* tslint:disable */
/* eslint-disable */
/**
 * operon-demo-shop-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: private
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddToCartRequest,
  GetCart200ResponseInner,
  GetCartRequest,
  GetProducts200ResponseInner,
  LoginRequest,
} from '../models/index';
import {
    AddToCartRequestFromJSON,
    AddToCartRequestToJSON,
    GetCart200ResponseInnerFromJSON,
    GetCart200ResponseInnerToJSON,
    GetCartRequestFromJSON,
    GetCartRequestToJSON,
    GetProducts200ResponseInnerFromJSON,
    GetProducts200ResponseInnerToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
} from '../models/index';

export interface AddToCartOperationRequest {
    addToCartRequest: AddToCartRequest;
}

export interface GetCartOperationRequest {
    getCartRequest: GetCartRequest;
}

export interface GetProductRequest {
    id: number;
}

export interface LoginOperationRequest {
    loginRequest: LoginRequest;
}

export interface RegisterRequest {
    loginRequest: LoginRequest;
}

export interface WebCheckoutRequest {
    username: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async addToCartRaw(requestParameters: AddToCartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addToCartRequest === null || requestParameters.addToCartRequest === undefined) {
            throw new runtime.RequiredError('addToCartRequest','Required parameter requestParameters.addToCartRequest was null or undefined when calling addToCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/add_to_cart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddToCartRequestToJSON(requestParameters.addToCartRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addToCart(requestParameters: AddToCartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addToCartRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getCartRaw(requestParameters: GetCartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetCart200ResponseInner>>> {
        if (requestParameters.getCartRequest === null || requestParameters.getCartRequest === undefined) {
            throw new runtime.RequiredError('getCartRequest','Required parameter requestParameters.getCartRequest was null or undefined when calling getCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/get_cart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCartRequestToJSON(requestParameters.getCartRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetCart200ResponseInnerFromJSON));
    }

    /**
     */
    async getCart(requestParameters: GetCartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetCart200ResponseInner>> {
        const response = await this.getCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProducts200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProducts200ResponseInnerFromJSON(jsonValue));
    }

    /**
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProducts200ResponseInner> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProductsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProducts200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetProducts200ResponseInnerFromJSON));
    }

    /**
     */
    async getProducts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProducts200ResponseInner>> {
        const response = await this.getProductsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginRaw(requestParameters, initOverrides);
    }

    /**
     */
    async paymentWebhookRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payment_webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentWebhook(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.paymentWebhookRaw(initOverrides);
    }

    /**
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling register.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async webCheckoutRaw(requestParameters: WebCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling webCheckout.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/checkout_session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async webCheckout(requestParameters: WebCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.webCheckoutRaw(requestParameters, initOverrides);
    }

}
