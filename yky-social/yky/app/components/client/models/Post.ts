/* tslint:disable */
/* eslint-disable */
/**
 * social-ts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PostType } from './PostType';
import {
    PostTypeFromJSON,
    PostTypeFromJSONTyped,
    PostTypeToJSON,
} from './PostType';
import type { UserLogin } from './UserLogin';
import {
    UserLoginFromJSON,
    UserLoginFromJSONTyped,
    UserLoginToJSON,
} from './UserLogin';

/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    authorOrignal?: string;
    /**
     * 
     * @type {Date}
     * @memberof Post
     */
    postTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    text: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Post
     */
    media: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Post
     */
    tags: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Post
     */
    mentions: Array<string>;
    /**
     * 
     * @type {PostType}
     * @memberof Post
     */
    postType: PostType;
    /**
     * 
     * @type {UserLogin}
     * @memberof Post
     */
    authorUser: UserLogin | null;
}

/**
 * Check if a given object implements the Post interface.
 */
export function instanceOfPost(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "text" in value;
    isInstance = isInstance && "media" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "mentions" in value;
    isInstance = isInstance && "postType" in value;
    isInstance = isInstance && "authorUser" in value;

    return isInstance;
}

export function PostFromJSON(json: any): Post {
    return PostFromJSONTyped(json, false);
}

export function PostFromJSONTyped(json: any, ignoreDiscriminator: boolean): Post {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'author': !exists(json, 'author') ? undefined : json['author'],
        'authorOrignal': !exists(json, 'author_orignal') ? undefined : json['author_orignal'],
        'postTime': !exists(json, 'post_time') ? undefined : (new Date(json['post_time'])),
        'text': json['text'],
        'media': json['media'],
        'tags': json['tags'],
        'mentions': json['mentions'],
        'postType': PostTypeFromJSON(json['post_type']),
        'authorUser': UserLoginFromJSON(json['authorUser']),
    };
}

export function PostToJSON(value?: Post | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'author': value.author,
        'author_orignal': value.authorOrignal,
        'post_time': value.postTime === undefined ? undefined : (value.postTime.toISOString()),
        'text': value.text,
        'media': value.media,
        'tags': value.tags,
        'mentions': value.mentions,
        'post_type': PostTypeToJSON(value.postType),
        'authorUser': UserLoginToJSON(value.authorUser),
    };
}

